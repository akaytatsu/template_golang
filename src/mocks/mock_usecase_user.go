// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/user (interfaces: IUsecaseUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseUser is a mock of IUsecaseUser interface.
type MockIUsecaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseUserMockRecorder
}

// MockIUsecaseUserMockRecorder is the mock recorder for MockIUsecaseUser.
type MockIUsecaseUserMockRecorder struct {
	mock *MockIUsecaseUser
}

// NewMockIUsecaseUser creates a new mock instance.
func NewMockIUsecaseUser(ctrl *gomock.Controller) *MockIUsecaseUser {
	mock := &MockIUsecaseUser{ctrl: ctrl}
	mock.recorder = &MockIUsecaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseUser) EXPECT() *MockIUsecaseUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecaseUser) Create(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseUserMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecaseUser)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIUsecaseUser) Delete(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseUserMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecaseUser)(nil).Delete), arg0)
}

// LoginUser mocks base method.
func (m *MockIUsecaseUser) LoginUser(arg0, arg1 string) (*entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIUsecaseUserMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIUsecaseUser)(nil).LoginUser), arg0, arg1)
}

// Update mocks base method.
func (m *MockIUsecaseUser) Update(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseUserMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecaseUser)(nil).Update), arg0)
}
